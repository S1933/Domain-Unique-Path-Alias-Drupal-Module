<?php

/**
 * @file
 * Hook implementations for this module.
 */

use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Language\LanguageInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\path_alias\PathAliasInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function domain_unique_path_alias_entity_presave(EntityInterface $entity) {
  if ($entity instanceof PathAliasInterface) {
    // Get domains configuration.

    /** @var \Drupal\domain\DomainStorage $domain */
    $domain = \Drupal::entityTypeManager()->getStorage('domain');
    $options = $domain->loadOptionsList();

    // Get domain_id from get request param.
    $domain_id = \Drupal::request()->request->get('field_domain_source');

    // Get domain_id from field_domain_source field.
    if (empty($domain_id) || !in_array($domain_id, $options)) {
      // Get field_domain_source data if a new translation.
      $node = \Drupal::routeMatch()->getParameter('node');

      // Get node from path_alias path.
      if (!$node instanceof NodeInterface) {
        $path = explode("/", $entity->getPath());
        if (
          isset($path[1], $path[2])
          && $path[1] === 'node'
          && is_numeric($path[2])
        ) {
          $node = Node::load($path[2]);
        }
      }

      if ($node instanceof NodeInterface) {
        $langcode = \Drupal::languageManager()
          ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
        $langcode = $entity->get('langcode')->getString() ?? $langcode;
        $translation_languages = $node->getTranslationLanguages();
        if (in_array($langcode, array_keys($translation_languages))) {
          $path_alias_helper = \Drupal::service('domain_unique_path_alias.helper');
          $domain_id = $path_alias_helper->getDomainId($node);
        }
      }
    }

    // Set domain_id to path_alias entity.
    if (!empty($domain_id)) {
      /** @var \Drupal\path_alias\Entity\PathAlias $entity */
      $entity->set('domain_id', $domain_id);
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function domain_unique_path_alias_entity_base_field_info(ContentEntityType $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'path_alias') {
    $fields['domain_id'] = BaseFieldDefinition::create('string')
      ->setLabel('Domain Id')
      ->setDescription('Domain identification.');
  }

  return $fields;
}

/**
 * Implements hook_validation_constraint_alter().
 */
function domain_unique_path_alias_validation_constraint_alter(array &$definitions) {
  if (isset($definitions['UniquePathAlias'])) {
    $definitions['UniquePathAlias']['class'] = '\\Drupal\\domain_unique_path_alias\\Plugin\\Validation\\Constraints\\DomainUniquePathAliasConstraint';
  }
}
